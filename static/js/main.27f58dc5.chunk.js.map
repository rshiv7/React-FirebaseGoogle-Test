{"version":3,"sources":["firebaseConfig.js","components/Form.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebaseAppAuth","firebase","firebaseConfig","auth","providers","googleProvider","GoogleAuthProvider","useStyles","makeStyles","theme","container","display","flexWrap","input","margin","spacing","Inputs","state","classes","_this$props","this","props","user","signOut","signInWithGoogle","react_default","a","createElement","className","Grid","displayName","variant","color","button","onClick","React","Component","withFirebaseAuth","root","flexGrow","menuButton","marginRight","title","paper","Object","defineProperty","position","transform","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","outline","rand","Math","round","random","getModalStyle","top","left","concat","Navbar","_React$useState","useState","modalStyle","slicedToArray","_React$useState3","_React$useState4","open","setOpen","AppBar","Toolbar","IconButton","edge","aria-label","Menu_default","Typography","Button","Modal","aria-labelledby","aria-describedby","onClose","style","id","Form","App","components_Navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27f58dc5.chunk.js","sourcesContent":["const config = {\n    apiKey: \"AIzaSyCXpi_aBcUODwqgVEENc4EXGJ8H44-igPE\",\n    authDomain: \"campmom-b95e0.firebaseapp.com\",\n    databaseURL: \"https://campmom-b95e0.firebaseio.com\",\n    projectId: \"campmom-b95e0\",\n    storageBucket: \"\",\n    messagingSenderId: \"443742210904\",\n};\nexport default config;","import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport withFirebaseAuth from 'react-with-firebase-auth'\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseConfig from '../firebaseConfig';\n// import withStyles\n\n\n\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst firebaseAppAuth = firebaseApp.auth();\nconst providers = {\n    googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\n\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    input: {\n        margin: theme.spacing(1),\n    },\n}));\n\n\nclass Inputs extends React.Component {\n\n    state = {}\n\n    render() {\n\n\n        const classes = useStyles;\n        const {\n            user,\n            signOut,\n            signInWithGoogle,\n        } = this.props;\n\n\n        return (\n            <div className={classes.container}>\n\n                {/* <Input\n                    placeholder=\"Username\"\n                    className={classes.input}\n                    inputProps={{\n                        'aria-label': 'description',\n                    }}\n                />\n                <Input\n                    placeholder=\"Password\"\n                    className={classes.input}\n                    inputProps={{\n                        'aria-label': 'description',\n                    }}\n                /> */}\n                <Grid container spacing={3}>\n                    {\n                        user\n                            ? <p>Hello, {user.displayName}</p>\n                            : <p>Please sign in.</p>\n                    }\n                    {\n                        user\n                            ? <button variant=\"contained\" color=\"primary\" className={classes.button} onClick={signOut}>Sign out</button>\n                            : <button variant=\"contained\" color=\"primary\" className={classes.button} onClick={signInWithGoogle}>Sign in with Google</button>\n                    }\n                    {/* <Grid item xs={12} sm={6}>\n                        <Button id=\"sign-up\" variant=\"contained\" color=\"primary\" className={classes.button}>\n                            Sign Up\n      </Button>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Button id=\"login\" variant=\"contained\" color=\"primary\" className={classes.button}>\n                            Sign In\n      </Button>\n                    </Grid> */}\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default withFirebaseAuth({\n    providers,\n    firebaseAppAuth,\n})(Inputs);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport Form from '../Form'\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\n\n\n\n\n\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    paper: {\n        position: 'absolute',\n        // top: \"50%\",\n        // left: \"50%\",\n        transform: \"translateX(-100px)\",\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 4),\n        outline: 'none',\n        border: 'none',\n    },\n}));\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nfunction Navbar() {\n    const classes = useStyles();\n    const [modalStyle] = React.useState(getModalStyle);\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n    return (\n        <div>\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Camp.Mom\n                        </Typography>\n                        <Button className=\"Login\" onClick={handleOpen} color=\"inherit\">Login</Button>\n\n                    </Toolbar>\n\n                </AppBar>\n            </div>\n            <Modal\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                open={open}\n                onClose={handleClose}\n                className=\"mod-log\"\n            >\n                <div style={modalStyle} className={classes.paper}>\n                    <h2 id=\"modal-title\">Sign Up</h2>\n\n                    <Form>\n\n                    </Form>\n\n\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}